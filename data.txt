1. JVM
   - Виртуальная машина Java для исполнения байт-кода.
   - Загрузка, проверка, выделение памяти, инициализация, интерпретация/компиляция, управление памятью и потоками.

2. Интерфейсы vs абстрактные классы
   - Интерфейсы: только абстрактные методы, множественное наследование, нет состояния.
   - Абстрактные классы: абстрактные и конкретные методы, одиночное наследование, могут содержать состояние.

3. Перегрузка vs переопределение методов
   - Перегрузка: методы с одним именем, но разными параметрами.
   - Переопределение: методы с тем же именем и параметрами в подклассе, замещают реализацию из суперкласса.

4. Коллекции и основные интерфейсы
   - List (ArrayList, LinkedList): упорядоченный список.
   - Set (HashSet, TreeSet): неупорядоченное множество.
   - Queue (LinkedList, PriorityQueue): очередь.
   - Map (HashMap, TreeMap): сопоставление ключ-значение.

5. ArrayList vs LinkedList
   - ArrayList: основан на массиве, быстрый доступ, медленная вставка/удаление в середине.
   - LinkedList: связанный список, медленный доступ, быстрая вставка/удаление.

6. Исключения
   - Ошибки исключительных ситуаций во время выполнения программы.
   - Проверяемые и непроверяемые исключения.
   - Блоки try-catch, throws, finally.

7. ООП
   - Инкапсуляция, наследование, полиморфизм, абстракция, композиция.

8. Многопоточность
   - Выполнение нескольких потоков одновременно.
   - Создание классов, реализующих Runnable или наследующих Thread.
   - Использование пула потоков с Executor и ExecutorService.

9. Синхронизация и механизмы
   - Синхронизация: контроль доступа к общим ресурсам/критическим секциям.
   - synchronized, Lock, Semaphore, CountDownLatch и другие механизмы.

10. Стримы
    - Последовательность элементов для обработки и манипуляции.
    - Ленивые вычисления, параллельное выполнение, операции над коллекциями.

11. Аннотации
    - Метаданные для предоставления дополнительной информации.
    - @Override, @Deprecated, @SuppressWarnings и другие.

12. Сериализация
    - Преобразование объектов в последовательность байтов.
    - Использование интерфейса Serializable и классов ObjectOutputStream, ObjectInputStream.

13. Рефлексия
    - Анализ типов объектов, доступ к полям и методам.
    - Классы Class, Method, Field и другие из пакета java.lang.reflect.

14. Дженерики
    - Обобщенные типы для работы с различными типами данных.
    - Классы, интерфейсы и методы, параметризованные типами.

15. Лямбда-выражения
    - Краткая форма записи анонимных функций.
    - Передача функций как аргументов, функциональные интерфейсы.

16. Модификаторы доступа
    - public, private, protected, default.
    - Контроль доступа к классам, методам, полям.

17. Статические методы
    - Принадлежат классу, вызываются без создания экземпляра.
    - Используются через имя класса: ClassName.methodName().

18. Конструкторы
    - Специальные методы для создания экземпляров классов.
    - Используются для инициализации объектов.

19. Перечисления
    - Ограниченный набор именованных значений.
    - Создание и использование enum-типов.

20. Абстрактные классы
    - Классы с абстрактными методами и конкретными методами.
    - Могут содержать состояние и поведение.

21. Garbage Collector
    - Механизм автоматического управления памятью в Java.
    - Высвобождение памяти от неиспользуемых объектов.

22. Итераторы
    - Итерация по элементам коллекций.
    - Использование методов hasNext() и next().

23. Сборщики мусора
    - Различные алгоритмы сборки мусора в JVM.

24. Работа с файлами и директориями
    - Чтение, запись, создание и удаление файлов/директорий.

25. NullPointerException
    - Исключение, возникающее при обращении к null-ссылке.
    - Проверка на null перед использованием.

26. Java Annotation Processing
    - Анализ и обработка аннотаций во время компиляции.

27. Новые возможности в Java
    - Версионные изменения, новые API и возможности.

28. Множественное наследование и Java
    - Отсутствие поддержки множественного наследования классов.
    - Множественное наследование интерфейсов.

29. Модификатор final
    - Запрет изменения переменных, методов, классов.

30. Безопасность веб-приложений на Java
    - Защита от уязвимостей, аутентификация, авторизация.

31. Регулярные выражения
    - Поиск и манипуляции текстом с помощью шаблонов.

32. Абстрактное синтаксическое дерево
    - Представление синтаксической структуры кода.

33. Инструменты и фреймворки
    - Используемые инструменты и фреймворки для разработки.

34. Паттерны проектирования
    - Шаблоны решений для распространенных задач.

35. instanceof оператор
    - Проверка типа объекта во время выполнения.

36. Множественное наследование интерфейсов
    - Реализация нескольких интерфейсов одновременно.

37. Локальные и анонимные классы
    - Классы, объявленные внутри других классов или методов.

38. Итеративный алгоритм бинарного поиска
    - Поиск элемента в отсортированном массиве.

39. Обработка исключений
    - try-catch блоки, обработка и выброс исключений.

40. Оптимизация производительности
    - Использование эффективных алгоритмов и структур данных.

41. Пул потоков
    - Управление пулом потоков для выполнения задач.

42. Механизм загрузки классов
    - Загрузка классов в JVM, ClassLoader.

43. hashCode() и equals() методы
    - Методы для работы с хэшированием и сравнением объектов.

44. Модификатор volatile
    - Гарантирует видимость изменений между потоками.

45. Работа с датами и временем
    - Классы Date, Calendar, LocalDateTime и другие.

46. Асинхронные операции и CompletableFuture
    - Асинхронное выполнение задач и обработка результатов.

47. try-with-resources
    - Механизм автоматического закрытия ресурсов.

48. Потоки ввода-вывода
    - Чтение и запись данных из различных источников.

49. QuickSort алгоритм сортировки
    - Быстрая сортировка массива.

50. Java Memory Model и happens-before отношение
    - Правила для гарантии последовательности действий в многопоточных программах.